import { inject, createDynamicRef } from '@viewfly/core'
import { ViewUpdateInjectionToken } from '../../injection-tokens'
export default function() {
  const subject = inject(ViewUpdateInjectionToken)
  const ref = createDynamicRef(node => {
    subject.next(node as HTMLElement)
  })
  return function() {
    return (
      <div ref={ref}><h1>模块</h1>
<p>模块在 Textbus 中是一组组件、格式、插件及行为的功能集合。使用模块，你可以很方便的把一组相关的功能组装在一起，然后在 Textbus 配置项中引入该模块，Textbus 将会使用该模块的所有功能。</p>
<p>模块的接口如下：</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;* Textbus 模块配置</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;*/</span></div><div class="tb-code-line"><span class="tb-hl-keyword">export</span>&nbsp;<span class="tb-hl-keyword">interface</span>&nbsp;<span class="tb-hl-class-name">Module</span>&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/** 组件列表 */</span></div><div class="tb-code-line">&nbsp;&nbsp;components?: Component[]</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/** 格式列表 */</span></div><div class="tb-code-line">&nbsp;&nbsp;formatters?: (Formatter&lt;<span class="tb-hl-builtin">any</span>&gt; | ((injector: Injector) =&gt; Formatter&lt;<span class="tb-hl-builtin">any</span>&gt;))[]</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/** 属性列表 */</span></div><div class="tb-code-line">&nbsp;&nbsp;attributes?: (Attribute&lt;<span class="tb-hl-builtin">any</span>&gt; | ((injector: Injector) =&gt; Attribute&lt;<span class="tb-hl-builtin">any</span>&gt;))[]</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/** 跨平台及基础扩展实现的提供者 */</span></div><div class="tb-code-line">&nbsp;&nbsp;providers?: Provider[]</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/** 插件集合 */</span></div><div class="tb-code-line">&nbsp;&nbsp;plugins?:&nbsp;<span class="tb-hl-builtin">Array</span>&lt;Plugin | (() =&gt; Plugin)&gt;</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 当模块注册时调用</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;beforeEach?(textbus: Textbus):&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 初始化时的设置，返回一个函数，当 Textbus 销毁时调用</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* @param textbus</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;setup?(textbus: Textbus):&nbsp;<span class="tb-hl-builtin">Promise</span>&lt;(() =&gt;&nbsp;<span class="tb-hl-keyword">void</span>) |&nbsp;<span class="tb-hl-keyword">void</span>&gt; | (() =&gt;&nbsp;<span class="tb-hl-keyword">void</span>) |&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 当启动完成时触发</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;onAfterStartup?(textbus: Textbus):&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 当 Textbus 销毁时触发</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;onDestroy?():&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">TypeScript</span></div></pre>
<p>在 Textbus 实例化时传入模块：</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;textbus =&nbsp;<span class="tb-hl-keyword">new</span>&nbsp;<span class="tb-hl-class-name">Textbus</span>({'{'}</div><div class="tb-code-line">&nbsp;&nbsp;imports: [</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;yourModule1,</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;yourModule2,</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;...</div><div class="tb-code-line">&nbsp;&nbsp;]</div><div class="tb-code-line">{'}'})</div></div><span class="tb-pre-lang">TypeScript</span></div></pre>
<h1>插件</h1>
<p>插件可以让 Textbus 在原有的基础上，进一步增强一些你定制的功能。插件的实现很简单，只需要一个带有 setup 方法的对象即可。</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;* Textbus 插件接口</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;*/</span></div><div class="tb-code-line"><span class="tb-hl-keyword">export</span>&nbsp;<span class="tb-hl-keyword">interface</span>&nbsp;<span class="tb-hl-class-name">Plugin</span>&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 编辑器初始化时调用的勾子</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* @param textbus 访问 Textbus 内部实例的 IoC 容器</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-function">setup</span>(textbus: Textbus):&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">/**</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;* 当编辑器销毁时调用</span></div><div class="tb-code-line"><span class="tb-hl-comment">&nbsp;&nbsp;&nbsp;*/</span></div><div class="tb-code-line">&nbsp;&nbsp;onDestroy?():&nbsp;<span class="tb-hl-keyword">void</span></div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">TypeScript</span></div></pre>
<p>如，我们要实现一个实时监听文档选区变化的插件：</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} Plugin, Selection, Subscription {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/core'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">class</span>&nbsp;<span class="tb-hl-class-name">MyPlugin</span>&nbsp;<span class="tb-hl-keyword">implements</span>&nbsp;<span class="tb-hl-class-name">Plugin</span>&nbsp;{'{'}</div><div class="tb-code-line">&nbsp;&nbsp;subscription!: Subscription</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-function">setup</span>(textbus) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;selection = textbus.<span class="tb-hl-function">get</span>(Selection)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">this</span>.subscription = selection.onChange.<span class="tb-hl-function">subscribe</span>(() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-builtin">console</span>.<span class="tb-hl-function">log</span>(<span class="tb-hl-string">'选区变化了'</span>)</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;{'}'})</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-function">onDestroy</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">this</span>.subscription.<span class="tb-hl-function">unsubscribe</span>()</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">TypeScript</span></div></pre></div>
    )
  }
}