import { inject, useRef } from '@viewfly/core'
import { ViewUpdateInjectionToken } from '../../injection-tokens'
export default function() {
  const subject = inject(ViewUpdateInjectionToken)
  const ref = useRef(node => {
    subject.next(node as HTMLElement)
  })
  return function() {
    return (
      <div ref={ref}><h1>简介</h1>
<p>Textbus 是一个以组件为中心，数据驱动的富文本编辑器开发框架！为了解决传统富文本开发中遇到的各种问题，我们完全自主设计了富文本的组件系统和格式系统，旨在降低富文本的开发成本，帮助你更轻松的扩展出丰富的富文本功能。不管你是富文本开发的老鸟，亦或是前端的新手，你都将会在 Textbus 中感受到非凡的开发体验和扩展能力。</p>
<p>从 4.0 开始，Textbus 全面拥抱前端生态，支持&nbsp;<a target="_blank" href="https://viewfly.org">Viewfly</a>、Vue、React 直接渲染富文本内容。意味着你可以无任何成本的使用一些开源组件库，更简单的实现富文本中各种的交互能力。</p>
<p>Textbus 还拥有超强的性能，在使用&nbsp;<a target="_blank" href="https://viewfly.org">Viewfly</a>&nbsp;作为渲染层时，我们使用红楼梦作为测试样本，Textbus 可以实现 5 万个段落无卡顿编辑，这相当于 15 本红楼梦共 1700 万字同时在一个文档内（一本红楼梦大约 3100 个段落），这在以前是不可想象的。</p>
<tb-alert data-type="default" class="tb-alert tb-alert-default">
  <div>提示：从 4.0 开始，Textbus 基础库不再提供默认的编辑器，你可以阅读文档并开发自己的编辑器，或者 github issue 留言咨询相关问题。</div>
</tb-alert>
<p>让我们开始吧！</p>
<h2>总览</h2>
<p>Textbus 4.0 总共有以下几个部分，我们可以根据自己的需要安装相关模块。</p>
<ul>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/core</strong>&nbsp;Textbus 内核，封装了富文本所需的组件、格式、选区、数据操作、历史记录、快捷键、语法糖等相关功能</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/platform-browser</strong>&nbsp;Textbus 在浏览器运行所需要的基础模块</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/platform-node</strong>&nbsp;Textbus 在 node 环境支持所需要的基础模块</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/collaborate</strong>&nbsp;Textbus 协作能力支持模块（Yjs 版）</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/adapter-viewfly</strong>&nbsp;Textbus 使用&nbsp;<a target="_blank" href="https://viewfly.org">Viewfly</a>&nbsp;作渲染实现时的适配器</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/adapter-vue</strong>&nbsp;Textbus 使用 Vue 作渲染实现时的适配器</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">@textbus/adapter-react</strong>&nbsp;Textbus 使用 React 作渲染实现时的适配器</li>
</ul>
<h1>开始</h1>
<p style="background-color:rgb(255, 255, 255)"><span style="color:rgb(73, 80, 96)">Textbus 官方文档将会以&nbsp;<a target="_blank" href="https://viewfly.org">Viewfly</a>&nbsp;作为默认视图实现，帮助大家一步步实现自己的编辑器。</span></p>
<tb-alert data-type="success" class="tb-alert tb-alert-success">
  <div>Viewfly 是一个简单易用、高性能的前端视图库，通过几个少量的 API 和 jsx，即可开发出富交互的用户界面。</div>
</tb-alert>
<h2><span style="color:rgb(73, 80, 96)">安装依赖</span></h2>
<p style="background-color:rgb(255, 255, 255)"><span style="color:rgb(73, 80, 96)">通过 npm 安装 Viewfly：</span></p><pre lang="" theme="starry" class="tb-pre tb-pre-hide-line-number"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">npm install @viewfly/core @viewfly/platform-browser</div></div><span class="tb-pre-lang"></span></div></pre>
<p>安装 Textbus：</p><pre lang="" theme="starry" class="tb-pre tb-pre-hide-line-number"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">npm install @textbus/core @textbus/platform-browser @textbus/adapter-viewfly</div></div><span class="tb-pre-lang"></span></div></pre>
<p>我们安装了 Textbus 下的：</p>
<ul>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">core</strong>&nbsp;使用 Textbus 必不可少的依赖</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">platform-browser</strong>&nbsp;Textbus 在浏览器运行所必须的环境支持模块</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">adapter-viewfly</strong>&nbsp;使用 Viewfly 渲染 Textbus 组件所必须的适配器</li>
</ul>
<p>还安装了 Viewfly 下的：</p>
<ul>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">core</strong>&nbsp;Viewfly 内核</li>
  <li class="tb-list-item"><strong style="color:rgb(58, 170, 250)">platform-browser</strong>&nbsp;Viewfly 在浏览器运行所必须的环境支持模块</li>
</ul>
<h2>创建第一个编辑器</h2>
<p>先准备一个空的 DOM 节点用于渲染编辑器。</p><pre lang="HTML" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">id</span>="<span class="tb-hl-attr-value">editor</span>"&gt;&lt;/<span class="tb-hl-tag">div</span>&gt;</div></div><span class="tb-pre-lang">HTML</span></div></pre>
<h3>创建根组件</h3><pre lang="Tsx" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-comment">// # root.component.tsx</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} defineComponent, ContentType {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/core'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} ViewComponentProps {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/adapter-viewfly'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 定义 Textbus 根组件数据模型</span></div><div class="tb-code-line"><span class="tb-hl-keyword">export</span>&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;rootComponent =&nbsp;<span class="tb-hl-function">defineComponent</span>({'{'}</div><div class="tb-code-line">&nbsp;&nbsp;name:&nbsp;<span class="tb-hl-string">'RootComponent'</span>,</div><div class="tb-code-line">&nbsp;&nbsp;type: ContentType.BlockComponent</div><div class="tb-code-line">{'}'})</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 创建 RootComponentView 组件用于渲染 Textbus 根组件</span></div><div class="tb-code-line"><span class="tb-hl-keyword">export</span>&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;RootComponentView = (props: ViewComponentProps&lt;<span class="tb-hl-keyword">typeof</span>&nbsp;rootComponent&gt;) =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;&lt;<span class="tb-hl-tag">div&nbsp;</span><span class="tb-hl-attr-name">ref</span>={'{'}props.rootRef{'}'}&gt;这是 Textbus 富文本编辑器，我是 {'{'}props.component.name{'}'} 组件！&lt;/<span class="tb-hl-tag">div</span>&gt;</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'}</div></div><span class="tb-pre-lang">Tsx</span></div></pre>
<p>创建一个空编辑器，并渲染到指定 DOM 元素内。</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-comment">// # editor.ts</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} ContentType, Textbus {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/core'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} Adapter {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/adapter-viewfly'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} BrowserModule {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@textbus/platform-browser'</span></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} createApp {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'@viewfly/platform-browser'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-keyword">import</span>&nbsp;{'{'} RootComponentView, rootComponent {'}'}&nbsp;<span class="tb-hl-keyword">from</span>&nbsp;<span class="tb-hl-string">'./doc.component'</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 创建 Viewfly 适配器，用于桥接 Textbus 和 Viewfly</span></div><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;adapter =&nbsp;<span class="tb-hl-keyword">new</span>&nbsp;<span class="tb-hl-class-name">Adapter</span>({'{'}</div><div class="tb-code-line">&nbsp;&nbsp;[rootComponent.name]: RootComponentView&nbsp;<span class="tb-hl-comment">// 声明 Textbus 根组件用 RootComponentView 组件渲染</span></div><div class="tb-code-line">{'}'}, (host, root) =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// host 为 Textbus 创建的用于渲染文档的容器</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// root 为 Viewfly 的根组件，即 RootComponentView 组件</span></div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// 使用 Viewfly 创建一个编辑器视图</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;app =&nbsp;<span class="tb-hl-function">createApp</span>(root, {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 使用 Textbus 实例作为 Viewfly App 的上下文，这样</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 我们就可以在 Viewfly 组件内通过 inject 函数注入 Textbus 实例</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-comment">// 中包含的内部对象了</span></div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;context: textbus</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}).<span class="tb-hl-function">mount</span>(host)</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// 返回一个函数，当 Textbus 销毁时，同时销毁 Viewlfy 实例</span></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">return</span>&nbsp;() =&gt; {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;app.<span class="tb-hl-function">destroy</span>()</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line">{'}'})</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 创建 Textbus 浏览器平台运行环境模块</span></div><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;browserModule =&nbsp;<span class="tb-hl-keyword">new</span>&nbsp;<span class="tb-hl-class-name">BrowserModule</span>(document.<span class="tb-hl-function">getElementById</span>(<span class="tb-hl-string">'editor'</span>)!, {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;adapter&nbsp;<span class="tb-hl-comment">// 添加 Viewfly 适配器</span></div><div class="tb-code-line">{'}'})</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 创建 Textbus 实例</span></div><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;textbus =&nbsp;<span class="tb-hl-keyword">new</span>&nbsp;<span class="tb-hl-class-name">Textbus</span>({'{'}</div><div class="tb-code-line">&nbsp;&nbsp;imports: [</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;browserModule&nbsp;<span class="tb-hl-comment">// 添加浏览器支持模块</span></div><div class="tb-code-line">&nbsp;&nbsp;]</div><div class="tb-code-line">{'}'})</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-comment">// 创建一个数据模型</span></div><div class="tb-code-line"><span class="tb-hl-keyword">const</span>&nbsp;rootModel = rootComponent.<span class="tb-hl-function">createInstance</span>(textbus)</div><div class="tb-code-line"><span class="tb-hl-comment">// 渲染数据模型</span></div><div class="tb-code-line">textbus.<span class="tb-hl-function">render</span>(rootModel)</div></div><span class="tb-pre-lang">TypeScript</span></div></pre>
<p>上面的代码对于刚上手的你来说，可能有点复杂，这是因为 Textbus 要保持最大的灵活性和可扩展性做出的必要妥协。不过后面的开发我们只会在上面的代码中增加一些声明，不会有其它改动了。<br/></p>
<p>运行上面的代码，你现在应该可以在浏览器看到 RootComponentView 组件的内容渲染到页面了。</p>
<tb-alert data-type="primary" class="tb-alert tb-alert-primary">
  <div>目前我们创建的编辑器是不可编辑的，这是正常情况，在 Textbus 中，任意组件的内容都不可以通过光标去编辑的，要想内容支持编辑，我们需要给组件添加插槽来实现。</div>
</tb-alert>
<h2>浏览器兼容</h2>
<p>Textbus 兼容现代浏览器，包括 Chrome、Firefox、Safari、Edge 等。</p>
<h3>兼容补丁</h3>
<p>已知 Firefox 不支持&nbsp;<code>Intl.Segmenter</code>，需要在 Textbus 启动之前打上特定补丁。</p><pre lang="" theme="starry" class="tb-pre tb-pre-hide-line-number"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line">npm install intl-segmenter-polyfill</div></div><span class="tb-pre-lang"></span></div></pre>
<p>在 Textbus 启动时，打上补丁</p><pre lang="TypeScript" theme="starry" line-number class="tb-pre"><div class="tb-pre-content"><div style="width:2.5em" class="tb-code-line-number-bg"></div><div class="tb-code-content"><div class="tb-code-line"><span class="tb-hl-keyword">async</span>&nbsp;<span class="tb-hl-keyword">function</span>&nbsp;<span class="tb-hl-function">createEditor</span>() {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-keyword">if</span>&nbsp;(!Intl.Segmenter) {'{'}</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="tb-hl-keyword">const</span>&nbsp;polyfill =&nbsp;<span class="tb-hl-keyword">await</span>&nbsp;<span class="tb-hl-keyword">import</span>(<span class="tb-hl-string">'intl-segmenter-polyfill/dist/bundled'</span>);</div><div class="tb-code-line">&nbsp;&nbsp;&nbsp;&nbsp;(Intl&nbsp;<span class="tb-hl-keyword">as</span>&nbsp;<span class="tb-hl-builtin">any</span>).Segmenter =&nbsp;<span class="tb-hl-keyword">await</span>&nbsp;polyfill.<span class="tb-hl-function">createIntlSegmenterPolyfill</span>()</div><div class="tb-code-line">&nbsp;&nbsp;{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line">&nbsp;&nbsp;<span class="tb-hl-comment">// 从这里开始创建编辑器</span></div><div class="tb-code-line">{'}'}</div><div class="tb-code-line"><br/></div><div class="tb-code-line"><span class="tb-hl-function">createEditor</span>()</div></div><span class="tb-pre-lang">TypeScript</span></div></pre></div>
    )
  }
}